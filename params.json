{"name":"meegpipe","tagline":"Scalable and reproducible M/EEG pipelines","body":"meegpipe\r\n========\r\n\r\n_meegpipe_ is a collection of MATLAB tools for building advanced processing\r\npipelines for high density physiological recordings. It is especially\r\nsuited for the processing of high-density [EEG][eeg] and [MEG][meg],\r\nbut can also handle other modalities such as [ECG][ecg], temperature,\r\n[actigraphy][acti], light exposure, etc.\r\n\r\n\r\n[gg]: https://groups.google.com/forum/#!forum/meegpipe\r\n[ggh]: http://germangh.com\r\n[eeg]: http://en.wikipedia.org/wiki/Electroencephalography\r\n[meg]: http://en.wikipedia.org/wiki/Magnetoencephalography\r\n[ecg]: http://en.wikipedia.org/wiki/Electrocardiography\r\n[acti]: http://en.wikipedia.org/wiki/Actigraphy\r\n\r\n\r\n## Pre-requisites (third-party dependencies)\r\n\r\nIf you are working at somerengrid (our lab's private computing grid), then\r\nall the pre-requisites are already there and you can go directly to the\r\ninstallation instructions.\r\n\r\n\r\n### EEGLAB\r\n\r\n[EEGLAB][eeglab] is required mostly for input/output of data from/to\r\n various data formats, and for plotting. Please ensure that EEGLAB is in\r\nyour MATLAB search path.\r\n\r\n[meegpipecfg]: http://github.com/meegpipe/meegpipe/blob/master/%2Bmeegpipe/meegpipe.ini\r\n[ftrip]: http://fieldtrip.fcdonders.nl/\r\n[eeglab]: http://sccn.ucsd.edu/eeglab/\r\n[fileio]: http://fieldtrip.fcdonders.nl/development/fileio\r\n[matlab-package]: http://www.mathworks.nl/help/matlab/matlab_oop/scoping-classes-with-packages.html\r\n\r\n### Highly recommended dependencies\r\n\r\nThe engine responsible for generating data processing reports in HTML\r\nrelies on several Python packages and on [Inkscape][inkscape]. _meegpipe_ will\r\n be fully functional without these dependencies, but the processing reports\r\nwill be generated in a plain text format (using [Remark][remark] syntax).\r\nInspecting plain text reports with embedded images is _very inconvenient_\r\nso please consider installing these [highly recommended dependencies][recommended-dep].\r\n\r\n[remark]: http://kaba.hilvi.org/remark/remark.htm\r\n[recommended-dep]: https://github.com/meegpipe/meegpipe/blob/master/recommended.md\r\n[inkscape]: http://www.inkscape.org/en/\r\n\r\n\r\n### Optional\r\n\r\nYou are encouraged to install a few [additional components][optional] that\r\ncan enhance _meegpipe_'s functionality in terms of\r\n[high-throughput computing][ht-comp].\r\n\r\n\r\n[ht-comp]: http://en.wikipedia.org/wiki/High-throughput_computing\r\n[optional]: https://github.com/meegpipe/meegpipe/blob/master/optional.md\r\n[gc]: http://www.google.com/chrome\r\n\r\n\r\n\r\n## Installation\r\n\r\nCopy and paste the following code in the MATLAB command window:\r\n\r\n````matlab\r\nunzip('https://github.com/meegpipe/meegpipe/zipball/master', 'meegpipe');\r\naddpath(genpath('meegpipe'));\r\nmeegpipe.initialize;\r\n% Initialize meegpipe every time that MATLAB starts\r\naddpath(userpath);\r\nfid = fopen(which('startup'), 'a');\r\nfprintf(fid, '\\n\\naddpath(genpath(''%s''));\\n', [pwd filesep 'meegpipe']);\r\nfprintf(fid, 'meegpipe.initialize;\\n\\n');\r\nfclose(fid);\r\n````\r\n\r\nNotice that the code above will install _meegpipe_ in directory `meegpipe`\r\nunder your current working directory. Notice also that EEGLAB needs to be\r\npart of your MATLAB search path for the `meegpipe.initialize` command to\r\n succeed.\r\n\r\n\r\n## Basic usage\r\n\r\n\r\n### Data processing nodes\r\n\r\n_meegpipe_ allows you to build processing pipelines by definining what you\r\nwant to do with your data in terms of _processing nodes_. There are\r\nprocessing nodes for a variaty of tasks: importing from disk, filtering,\r\nbad channel rejection, removing artifacts, feature extraction, etc. You can\r\nalso easily define your own nodes that will integrate seamlessly with\r\nthe _meegpipe_ framework.\r\n\r\nFor convenience, we bring package _meegpipe_ to the current name space:\r\n\r\n````\r\nimport meegpipe.*;\r\n````\r\n\r\nGenerate a [physioset][physioset] object from a MATLAB matrix using a\r\n[physioset_import][physioset_import_node] node:\r\n\r\n[physioset]: https://github.com/meegpipe/meegpipe/blob/master/%2Bphysioset/%40physioset/README.md\r\n[physioset_import_node]: https://github.com/meegpipe/meegpipe/blob/master/%2Bmeegpipe/%2Bnode/%2Bphysioset_import/README.md\r\n\r\n````matlab\r\nmyImporter = physioset.import.matrix('SamplingRate', 250);\r\nn0 = node.physioset_import.new('Importer', myImporter);\r\n% Run it! import the data!\r\ndata = run(n0, randn(15, 10000));\r\n````\r\n\r\nA node that detrends the imported data using a 10th order polynomial:\r\n\r\n````matlab\r\nn1 = node.filter.new('Filter', filter.polyfit('Order', 10));\r\nrun(n1, data);\r\n````\r\n\r\nReject bad channels:\r\n\r\n````matlab\r\nn2  = node.bad_channels.new;\r\nrun(n2, data);\r\n````\r\nApply a band pass filter between 0.1 and 70 Hz:\r\n\r\n````matlab\r\nmyFilter = @(sr) filter.bpfilt('Fp', [0.1 70]/(sr/2));\r\nn3   = node.filter.new('Filter', myFilter);\r\nrun(n3, data);\r\n````\r\n\r\nRemove powerline noise using [Blind Source Separation (BSS)][bss]:\r\n\r\n[bss]: http://en.wikipedia.org/wiki/Blind_signal_separation\r\n\r\n````matlab\r\nn4   = node.bss.pwl;\r\nrun(n4, data);\r\n````\r\n\r\nReject ocular artifacts using BSS:\r\n\r\n````matlab\r\nn5   = node.bss.eog;\r\nrun(n5, data);\r\n````\r\n\r\nExport to EEGLAB format:\r\n\r\n````matlab\r\nmyExporter = physioset.export.eeglab;\r\nn6 = node.physioset_export.new('Exporter', myExporter);\r\nrun(n6, data);\r\n````\r\n\r\nFor more information and a list of available processing nodes, see the\r\n[documentation][nodes-docs].\r\n\r\n[wiki-ref]: http://en.wikipedia.org/wiki/Reference_(computer_science)\r\n[nodes-docs]: http://github.com/meegpipe/meegpipe/blob/master/+meegpipe/+node/README.md\r\n\r\n\r\n### Processing reports\r\n\r\nEvery processing node generates a comprehensive HTML report for every data file\r\nthat is processed. In the examples above, you should have got an initial warning\r\nsaying something like:\r\n\r\n> <strong>Warning</strong>: A new session was created in folder 'session_1' <br>\r\n> In session.session>session.instance at 82 <br>\r\n>  In pset.generate_data at 35 <br>\r\n>  In matrix.import at 62 <br>\r\n\r\nThis means that _meegpipe_ just created a directory `session_1`, which will be\r\nused to store, among other things, the data processing reports. Namely, you can\r\nfind a node's HTML report under:\r\n\r\n    session_1/[DATA].meegpipe/[NODE]_[USR]_[SYS]/index.htm\r\n\r\nwhere\r\n\r\n__DATA__ is a string identifying the processed [physioset][physioset]. Use\r\n method `get_name()` to find out the name of a [physioset][physioset] object.\r\n\r\n__NODE__ is a string identifying the _processing node_. It is a combination of\r\n the node name (which can be obtained using method `get_name()`) and a hash code that\r\n summarizes the node configuration.\r\n\r\n__USR__ is just the name of the user that ran command `run()`.\r\n\r\n__SYS__ is a string identifying the operating system and MATLAB version (e.g. _PCWIN64-R2011b_).\r\n\r\n\r\nNeither Firefox nor Google Chrome are able to display local .svg files, when\r\nrunning under Windows 8. Whenever trying to do so, both browsers attempt to\r\ndownload the file and thus the file is not displayed. Read the\r\n[document on known issues and limitations][issues] for ways to overcome\r\nthis problem.\r\n\r\n[issues]: https://github.com/meegpipe/meegpipe/blob/master/issues.md\r\n\r\n\r\n__NOTE:__ The HTML reports will be generated only if you have installed all\r\nthe [recommended dependencies][recommended-dep] on your system.\r\n\r\n\r\n### Pipelines\r\n\r\nA `pipeline` is just a concatenation of nodes. With the exception of\r\n[physioset_import][node-physioset_import] nodes, all other node classes always\r\ntake a [physioset][physioset] as input. And with the exception of\r\n[physioset_export][node-physioset_export] nodes, all other node classes produce a\r\n`physioset` object as output.\r\n\r\nThe five processing steps that we performed above when illustrating how nodes\r\nwork could have been grouped into a pipeline:\r\n\r\n[node-physioset_import]: https://github.com/meegpipe/meegpipe/blob/master/%2Bmeegpipe/%2Bnode/%2Bphysioset_import/%40physioset_import/physioset_import.m\r\n[node-physioset_export]: https://github.com/meegpipe/meegpipe/blob/master/%2Bmeegpipe/%2Bnode/%2Bphysioset_export/%40physioset_export/physioset_export.m\r\n\r\n````matlab\r\nimport meegpipe.*;\r\nimport physioset.import.*;\r\n\r\nmyPipe = node.pipeline.new(...\r\n    'NodeList', {n0, n1, n2, n3, n4, n5, n6});\r\n\r\n% Will produce an output file in EEGLAB format\r\nrun(myPipe, randn(15, 10000));\r\n\r\n````\r\n\r\n## More information\r\n\r\nSee the practical [tutorials](http://github.com/meegpipe/meegpipe/tree/master/tutorials/README.md)\r\nfor some typical use cases of _meegpipe_. A high-level description of the API components\r\ncan be found in the [documentation][doc-main]. The documentation is still\r\nwork in progress.\r\n\r\n[doc-main]: https://github.com/meegpipe/meegpipe/blob/master/%2Bmeegpipe/README.md\r\n\r\n\r\n## License\r\n\r\nFor convenience, _meegpipe_ ships together with code from third-parties.\r\nYou can find a comprehensive list [here][attribution].\r\n\r\n[attribution]: https://github.com/meegpipe/meegpipe/blob/master/attribution.md\r\n\r\n\r\nAny code that is not part of any of the bundled third-party dependencies\r\n(see [the list][attribution]), is released under the\r\n[Creative Commons Attribution-NonCommercial-ShareAlike licence](http://creativecommons.org/licenses/by-nc-sa/3.0/).\r\n","google":"UA-44767640-1","note":"Don't delete this file! It's used internally to help with page regeneration."}