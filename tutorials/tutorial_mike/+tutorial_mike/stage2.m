% stage 2b
%
% Removing PWL, EOG, and long-duration PWL noise components

meegpipe.initialize;

import meegpipe.node.*;
import misc.regexpi_dir;
import mperl.file.spec.catdir;
import mperl.file.find.finddepth_regex_match;
import mperl.join;
import somsds.link2files;
import misc.get_hostname;

%% Analysis parameters

DO_REPORT = false;

PIPE_NAME = 'stage2';

% The (root) location of the output generated by the previous step.
switch lower(get_hostname)
    
    case 'outolintulan',
        INPUT_DIR = '/Volumes/DATA/tutorial_mike/stage1';
        
        % The directory where the results of this stage will be placed  
        OUTPUT_DIR = '/Volumes/DATA/tutorial_mike/stage2';
    case 'nin271'
        INPUT_DIR = 'D:\tutorial_mike\stage1';
        OUTPUT_DIR = 'D:\tutorial_mike\stage2';
    otherwise
        error('No idea where the data is in this system');
        
end

%% Build pipeline nodes one by one

% Node: data import
myImporter = physioset.import.physioset;
thisNode = physioset_import.new('Importer', myImporter);
nodeList = {thisNode};

% Note: copy the physioset. Otherwise, the input file will be modified!
thisNode = copy.new;
nodeList = [nodeList {thisNode}];

% Node: Remove powerline noise
thisNode = bss_regr.pwl(NaN, 'GenerateReport', false);
nodeList = [nodeList {thisNode}];

% Node: Remove ocular artifacts
thisNode = bss_regr.eog;
nodeList = [nodeList {thisNode}];

% Node: Remove (long duration) muscle artifacts
thisNode = bss_regr.emg;
nodeList = [nodeList {thisNode}];

% The actual pipeline
myPipe = pipeline.new(...
    'NodeList',         nodeList, ...
    'Save',             true,  ...
    'GenerateReport',   DO_REPORT, ...
    'Name',             PIPE_NAME);

%% Process all the relevant data files
regex = '_stage1\.pseth?$';
files = finddepth_regex_match(INPUT_DIR, regex);
% link2files works only under Mac OS X and Linux
link2files(files, OUTPUT_DIR);
regex = '_stage1\.pseth$';
files = finddepth_regex_match(OUTPUT_DIR, regex);

data = run(myPipe, files{:});