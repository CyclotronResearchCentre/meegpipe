function obj = pwl(varargin)
% PWL - Rejects powerline components
%
%
% See also bss_regr

import meegpipe.node.*;
import misc.process_arguments;
import pset.selector.sensor_class;
import pset.selector.good_data;
import pset.selector.cascade;
import misc.split_arguments;
import misc.isnatural;

opt.MaxPCs          = 40;
opt.MinPCs          = 0;
opt.RetainedVar     = 99.75;

[thisArgs, varargin] = split_arguments(fieldnames(opt), varargin);

[~, opt] = process_arguments(opt, thisArgs);

pwlFilter = @(sr) filter.bpfilt('fp', [35 150]/(sr/2));
pcaObj = spt.pca(  ...
        'LearningFilter',   pwlFilter, ...
        'RetainedVar',      opt.RetainedVar, ...
        'MaxCard',          opt.MaxPCs, ...
        'MinCard',          opt.MinPCs, ...
        'MaxCond',          1000);
   
dataSel = cascade(sensor_class('Class', {'MEG', 'EEG'}), good_data);

% Component selection criteria
myFeat = spt.feature.psd_ratio(...
    'TargetBand',   [49 51], ...
    'RefBand',      [3 11]);

myCrit = spt.criterion.threshold(myFeat, ...
    'Max',      30, ...
    'MaxCard',  2, ...
    'MinCard',  0);

obj = bss_regr.new(...
    'DataSelector',     dataSel, ...
    'Criterion',        myCrit, ...
    'PCA',              pcaObj, ...
    'BSS',              spt.bss.multicombi, ...   
    'Name',             'bss_regression.pwl', ...
    varargin{:});

% This has been removed because I am afraid that it could actually
% introduce powerline noise in channels that were originally pwl-free
% 'RegrFilter',       filter.mlag_regr('Order', 1), ...


end